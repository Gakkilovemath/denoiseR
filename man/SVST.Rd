% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/SVST.R
\name{SVST}
\alias{SVST}
\title{Singular Values Soft Thresholding}
\usage{
SVST(X, sigma, center = "TRUE", lambda0 = NA)
}
\arguments{
\item{X}{a data frame or a matrix with numeric entries}

\item{sigma}{integer, standard deviation of the Gaussian noise. By default sigma is estimated using the estim_sigma function with the MAD option}

\item{center}{boolean, to center the data. By default "TRUE"}

\item{lambda0}{integer, the initial value for lambda used to optimize SURE, by default the median of the singular values (must be in log scale)}
}
\value{
mu.hat the estimator of the signal

nb.eigen the number of non-zero singular values

singval the singular values of the estimator

lambda the optimal lambda selected by minimizing SURE

low.rank the results of the SVD of the estimator
}
\description{
This function estimates a low-rank signal from Gaussian noisy data using Soft Thresholding of the singular values.
More precisely, any singular value smaller than a quantity lambda is set to zero (dl  = dl * max(1-lambda,0). This estimator minimizes the least-squares (Frobenius norm) penalized by the nuclear norm (sum of the singular values).
The tuning parameter lambda is selected by minimizing an unbiased estimate of the risk namely a Stein Unbiased Risk Estimate (SURE). This requires to know the variance of the noise sigma.
}
\details{
The SURE function is optimized in lambda using the optim function of the package stats (?optim). The initial lambda can be modified in the argument lambda0.  When sigma is not known, it can be estimated using the function estim_sigma. SVST automatically estimates the rank of the signal. Its value is given in the output nb.eigen corresponding to the number of non-zero eigenvalues.
The estimated low rank matrix is given in the output mu.hat.
}
\examples{
Xsim <- LRsim(200, 500, 100, 0.5)
truesigma <- 1/(0.5*sqrt(200*500))
svst.sure <-  SVST(Xsim$X, sigma = truesigma)
svst.sure$nb.eigen
svst.sure$lambda
svst.sure$singval

 Xsim <- LRsim(200, 500, 10, 4)
 sig <- estim_sigma(Xsim$X)
 svst.sure <- SVST(Xsim$X, sigma=sig)
}
\references{
CandÃ¨s, E. J., Sing-Long C. A. and Trzasko, J. D (2012). Unbiased risk estimates for singular value thresholding and spectral estimators. IEEE Transactions on Signal Processing 61(19), 4643-4657
}
\seealso{
\code{\link{estim_sigma}}

\code{\link{LRsim}}
}

